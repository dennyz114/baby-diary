import moment from 'moment/moment'
import { TIME_ZONE } from './constants'
// @ts-ignore
import localizationEs from 'moment/locale/es'
// @ts-ignore
import { capitalize } from 'lodash'

export const DATE_DASH_FORMAT = 'DD-MM-YYYY'
export const DATE_REPORT_FORMAT = 'ddd DD MMM'
export const TIME_FORMAT = 'hh:mm'
export const AM_OR_PM_FORMAT = 'A'
export const TIME_ZONE_FORMAT = 'z'

export function getDateDashFormatString(date: Date) {
  return moment(date).format(DATE_DASH_FORMAT)
}

export function getStringDateFullFormat(date: Date) {
  return moment(date).format(`${DATE_DASH_FORMAT} ${TIME_FORMAT} ${AM_OR_PM_FORMAT}`)
}

export function destructureDateObject(date?: Date) {
  return date ? moment(date).format(`${DATE_DASH_FORMAT} ${TIME_FORMAT} ${AM_OR_PM_FORMAT}`).split(' ') : [undefined, undefined, undefined]
}

export function dateAndTimeFormatToDateObject (date?: string, time?: string, amOrPm?: string): Date | undefined {
  if (!date || !time || !amOrPm)
    return undefined
  return moment(`${date} ${time} ${amOrPm} ${TIME_ZONE}`, `${DATE_DASH_FORMAT} ${TIME_FORMAT} ${AM_OR_PM_FORMAT} ${TIME_ZONE_FORMAT}`).toDate()
}

export function getDatesUntilNowSince(startDate: Date) {
  const date = new Date(startDate.getTime())
  date.setHours(0, 0, 0, 0)
  const now = new Date()
  const dates = []

  while (date <= now) {
    dates.push(new Date(date))
    date.setDate(date.getDate() + 1)
  }

  return dates.reverse()
}

export function getReadableDate(date: string) {
  const dateObject = new Date(date)
  const getReadableDay = (dateObject: Date) => {
    const today = new Date()
    if (dateObject.getFullYear() === today.getFullYear() && dateObject.getMonth() === today.getMonth() && dateObject.getDate() === today.getDate())
      return 'Hoy'
    if (dateObject.getFullYear() === today.getFullYear() && dateObject.getMonth() === today.getMonth() && dateObject.getDate() === today.getDate() - 1)
      return 'Ayer'
    // @ts-ignore
    const momentDate = moment(dateObject).locale('es', localizationEs)
    return capitalize(momentDate.format(DATE_REPORT_FORMAT))
  }

  return `${getReadableDay(dateObject)} - ${moment(dateObject).format('hh:mm A')}`
}

/*
* function generated by ChatGPT
* as a senior javascript developer write a function to calculate how many years, months, days, hours and minutes
* have passed since the birthdate until now. return an array of numbers representing years, months, days, hours and
* minutes. these numbers should not be negative, and less than the next unit, for example, days could not be bigger
* than 31
* */
export function getTimeSinceBornUntilNow(birthDate: Date) {
  const now = new Date();

  // Calculate years
  let years = now.getFullYear() - birthDate.getFullYear();

  // Calculate months
  let months = now.getMonth() - birthDate.getMonth();
  if (months < 0) {
    years -= 1;
    months += 12;
  }

  // Calculate days
  let days = now.getDate() - birthDate.getDate();
  if (days < 0) {
    months -= 1;
    const tempDate = new Date(birthDate);
    tempDate.setMonth(birthDate.getMonth() + 1);
    // @ts-ignore
    days += (now - tempDate) / (1000 * 60 * 60 * 24);
  }

  // Calculate hours
  let hours = now.getHours() - birthDate.getHours();
  if (hours < 0) {
    days -= 1;
    hours += 24;
  }

  // Calculate minutes
  let minutes = now.getMinutes() - birthDate.getMinutes();
  if (minutes < 0) {
    hours -= 1;
    minutes += 60;
  }

  return [years, months, days, hours, minutes];
}
